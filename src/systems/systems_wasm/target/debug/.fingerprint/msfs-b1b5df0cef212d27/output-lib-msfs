{"future_incompat_report":[{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":375335,"byte_end":375348,"line_start":10485,"line_end":10485,"column_start":36,"column_end":49,"is_primary":true,"text":[{"text":"            self.__bindgen_anon_1, self.data_ptr","highlight_start":36,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":375205,"byte_end":375359,"line_start":10482,"line_end":10486,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        write!(","highlight_start":9,"highlight_end":16},{"text":"            f,","highlight_start":1,"highlight_end":15},{"text":"            \"LLA_INFO {{ __bindgen_anon_1: {:?}, data_ptr: {:?} }}\",","highlight_start":1,"highlight_end":69},{"text":"            self.__bindgen_anon_1, self.data_ptr","highlight_start":1,"highlight_end":49},{"text":"        )","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:10485:36\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            self.__bindgen_anon_1, self.data_ptr\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":500901,"byte_end":500915,"line_start":13109,"line_end":13109,"column_start":127,"column_end":141,"is_primary":true,"text":[{"text":"        write ! (f , \"MODULE_VAR {{ id: {:?}, var_ptr: {:?}, var_type: {:?}, var_value: {:?}, var_old: {:?} }}\" , self . id , self . var_ptr , self . var_type , self . var_value , self . var_old)","highlight_start":127,"highlight_end":141}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":500783,"byte_end":500970,"line_start":13109,"line_end":13109,"column_start":9,"column_end":196,"is_primary":false,"text":[{"text":"        write ! (f , \"MODULE_VAR {{ id: {:?}, var_ptr: {:?}, var_type: {:?}, var_value: {:?}, var_old: {:?} }}\" , self . id , self . var_ptr , self . var_type , self . var_value , self . var_old)","highlight_start":9,"highlight_end":196}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:13109:127\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m13109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mype: {:?}, var_value: {:?}, var_old: {:?} }}\" , self . id , self . var_ptr , self . var_type , self . var_value , self . var_old)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":546667,"byte_end":546685,"line_start":14487,"line_end":14487,"column_start":216,"column_end":234,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STATIC_IMAGE {{ __bindgen_anon_1: {:?}, image_data: {:?}, save_buffer: {:?}, hdc: {:?}, hbmp: {:?}, reserved1: {:?}, reserved2: {:?} }}\" , self . __bindgen_anon_1 , self . image_data , self . save_buffer , self . hdc , self . hbmp , self . reserved1 , self . reserved2)","highlight_start":216,"highlight_end":234}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":546460,"byte_end":546751,"line_start":14487,"line_end":14487,"column_start":9,"column_end":300,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STATIC_IMAGE {{ __bindgen_anon_1: {:?}, image_data: {:?}, save_buffer: {:?}, hdc: {:?}, hbmp: {:?}, reserved1: {:?}, reserved2: {:?} }}\" , self . __bindgen_anon_1 , self . image_data , self . save_buffer , self . hdc , self . hbmp , self . reserved1 , self . reserved2)","highlight_start":9,"highlight_end":300}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:14487:216\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m {:?} }}\" , self . __bindgen_anon_1 , self . image_data , self . save_buffer , self . hdc , self . hbmp , self . reserved1 , self . re\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":546688,"byte_end":546698,"line_start":14487,"line_end":14487,"column_start":237,"column_end":247,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STATIC_IMAGE {{ __bindgen_anon_1: {:?}, image_data: {:?}, save_buffer: {:?}, hdc: {:?}, hbmp: {:?}, reserved1: {:?}, reserved2: {:?} }}\" , self . __bindgen_anon_1 , self . image_data , self . save_buffer , self . hdc , self . hbmp , self . reserved1 , self . reserved2)","highlight_start":237,"highlight_end":247}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":546460,"byte_end":546751,"line_start":14487,"line_end":14487,"column_start":9,"column_end":300,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STATIC_IMAGE {{ __bindgen_anon_1: {:?}, image_data: {:?}, save_buffer: {:?}, hdc: {:?}, hbmp: {:?}, reserved1: {:?}, reserved2: {:?} }}\" , self . __bindgen_anon_1 , self . image_data , self . save_buffer , self . hdc , self . hbmp , self . reserved1 , self . reserved2)","highlight_start":9,"highlight_end":300}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:14487:237\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m. __bindgen_anon_1 , self . image_data , self . save_buffer , self . hdc , self . hbmp , self . reserved1 , self . reserved2)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":546701,"byte_end":546712,"line_start":14487,"line_end":14487,"column_start":250,"column_end":261,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STATIC_IMAGE {{ __bindgen_anon_1: {:?}, image_data: {:?}, save_buffer: {:?}, hdc: {:?}, hbmp: {:?}, reserved1: {:?}, reserved2: {:?} }}\" , self . __bindgen_anon_1 , self . image_data , self . save_buffer , self . hdc , self . hbmp , self . reserved1 , self . reserved2)","highlight_start":250,"highlight_end":261}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":546460,"byte_end":546751,"line_start":14487,"line_end":14487,"column_start":9,"column_end":300,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STATIC_IMAGE {{ __bindgen_anon_1: {:?}, image_data: {:?}, save_buffer: {:?}, hdc: {:?}, hbmp: {:?}, reserved1: {:?}, reserved2: {:?} }}\" , self . __bindgen_anon_1 , self . image_data , self . save_buffer , self . hdc , self . hbmp , self . reserved1 , self . reserved2)","highlight_start":9,"highlight_end":300}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:14487:250\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mon_1 , self . image_data , self . save_buffer , self . hdc , self . hbmp , self . reserved1 , self . reserved2)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":546715,"byte_end":546731,"line_start":14487,"line_end":14487,"column_start":264,"column_end":280,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STATIC_IMAGE {{ __bindgen_anon_1: {:?}, image_data: {:?}, save_buffer: {:?}, hdc: {:?}, hbmp: {:?}, reserved1: {:?}, reserved2: {:?} }}\" , self . __bindgen_anon_1 , self . image_data , self . save_buffer , self . hdc , self . hbmp , self . reserved1 , self . reserved2)","highlight_start":264,"highlight_end":280}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":546460,"byte_end":546751,"line_start":14487,"line_end":14487,"column_start":9,"column_end":300,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STATIC_IMAGE {{ __bindgen_anon_1: {:?}, image_data: {:?}, save_buffer: {:?}, hdc: {:?}, hbmp: {:?}, reserved1: {:?}, reserved2: {:?} }}\" , self . __bindgen_anon_1 , self . image_data , self . save_buffer , self . hdc , self . hbmp , self . reserved1 , self . reserved2)","highlight_start":9,"highlight_end":300}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:14487:264\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mage_data , self . save_buffer , self . hdc , self . hbmp , self . reserved1 , self . reserved2)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":546734,"byte_end":546750,"line_start":14487,"line_end":14487,"column_start":283,"column_end":299,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STATIC_IMAGE {{ __bindgen_anon_1: {:?}, image_data: {:?}, save_buffer: {:?}, hdc: {:?}, hbmp: {:?}, reserved1: {:?}, reserved2: {:?} }}\" , self . __bindgen_anon_1 , self . image_data , self . save_buffer , self . hdc , self . hbmp , self . reserved1 , self . reserved2)","highlight_start":283,"highlight_end":299}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":546460,"byte_end":546751,"line_start":14487,"line_end":14487,"column_start":9,"column_end":300,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STATIC_IMAGE {{ __bindgen_anon_1: {:?}, image_data: {:?}, save_buffer: {:?}, hdc: {:?}, hbmp: {:?}, reserved1: {:?}, reserved2: {:?} }}\" , self . __bindgen_anon_1 , self . image_data , self . save_buffer , self . hdc , self . hbmp , self . reserved1 , self . reserved2)","highlight_start":9,"highlight_end":300}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:14487:283\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mave_buffer , self . hdc , self . hbmp , self . reserved1 , self . reserved2)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":563061,"byte_end":563081,"line_start":15007,"line_end":15007,"column_start":558,"column_end":578,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":558,"highlight_end":578}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":562512,"byte_end":563529,"line_start":15007,"line_end":15007,"column_start":9,"column_end":1026,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":9,"highlight_end":1026}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15007:558\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m{:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":563084,"byte_end":563107,"line_start":15007,"line_end":15007,"column_start":581,"column_end":604,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":581,"highlight_end":604}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":562512,"byte_end":563529,"line_start":15007,"line_end":15007,"column_start":9,"column_end":1026,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":9,"highlight_end":1026}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15007:581\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0men_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":563110,"byte_end":563125,"line_start":15007,"line_end":15007,"column_start":607,"column_end":622,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":607,"highlight_end":622}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":562512,"byte_end":563529,"line_start":15007,"line_end":15007,"column_start":9,"column_end":1026,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":9,"highlight_end":1026}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15007:607\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mrce_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_ta\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":563128,"byte_end":563141,"line_start":15007,"line_end":15007,"column_start":625,"column_end":638,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":625,"highlight_end":638}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":562512,"byte_end":563529,"line_start":15007,"line_end":15007,"column_start":9,"column_end":1026,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":9,"highlight_end":1026}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15007:625\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0msource_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonl\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":563163,"byte_end":563188,"line_start":15007,"line_end":15007,"column_start":660,"column_end":685,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":660,"highlight_end":685}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":562512,"byte_end":563529,"line_start":15007,"line_end":15007,"column_start":9,"column_end":1026,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":9,"highlight_end":1026}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15007:660\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":563254,"byte_end":563273,"line_start":15007,"line_end":15007,"column_start":751,"column_end":770,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":751,"highlight_end":770}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":562512,"byte_end":563529,"line_start":15007,"line_end":15007,"column_start":9,"column_end":1026,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":9,"highlight_end":1026}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15007:751\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":563276,"byte_end":563293,"line_start":15007,"line_end":15007,"column_start":773,"column_end":790,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":773,"highlight_end":790}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":562512,"byte_end":563529,"line_start":15007,"line_end":15007,"column_start":9,"column_end":1026,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":9,"highlight_end":1026}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15007:773\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mize , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self .\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":563296,"byte_end":563308,"line_start":15007,"line_end":15007,"column_start":793,"column_end":805,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":793,"highlight_end":805}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":562512,"byte_end":563529,"line_start":15007,"line_end":15007,"column_start":9,"column_end":1026,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":9,"highlight_end":1026}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15007:793\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mdegrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 ,\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":563403,"byte_end":563422,"line_start":15007,"line_end":15007,"column_start":900,"column_end":919,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":900,"highlight_end":919}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":562512,"byte_end":563529,"line_start":15007,"line_end":15007,"column_start":9,"column_end":1026,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":9,"highlight_end":1026}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15007:900\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mself . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . sav\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":563449,"byte_end":563467,"line_start":15007,"line_end":15007,"column_start":946,"column_end":964,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":946,"highlight_end":964}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":562512,"byte_end":563529,"line_start":15007,"line_end":15007,"column_start":9,"column_end":1026,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":9,"highlight_end":1026}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15007:946\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0medle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_s\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":563493,"byte_end":563509,"line_start":15007,"line_end":15007,"column_start":990,"column_end":1006,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":990,"highlight_end":1006}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":562512,"byte_end":563529,"line_start":15007,"line_end":15007,"column_start":9,"column_end":1026,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)","highlight_start":9,"highlight_end":1026}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15007:990\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mxture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":584184,"byte_end":584199,"line_start":15674,"line_end":15674,"column_start":689,"column_end":704,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":689,"highlight_end":704}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":583504,"byte_end":584801,"line_start":15674,"line_end":15674,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15674:689\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string ,\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":584202,"byte_end":584222,"line_start":15674,"line_end":15674,"column_start":707,"column_end":727,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":707,"highlight_end":727}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":583504,"byte_end":584801,"line_start":15674,"line_end":15674,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15674:707\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m__bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old ,\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":584225,"byte_end":584241,"line_start":15674,"line_end":15674,"column_start":730,"column_end":746,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":730,"highlight_end":746}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":583504,"byte_end":584801,"line_start":15674,"line_end":15674,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15674:730\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mlf . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , se\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":584244,"byte_end":584257,"line_start":15674,"line_end":15674,"column_start":749,"column_end":762,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":749,"highlight_end":762}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":583504,"byte_end":584801,"line_start":15674,"line_end":15674,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15674:749\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mself . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data ,\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":584260,"byte_end":584277,"line_start":15674,"line_end":15674,"column_start":765,"column_end":782,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":765,"highlight_end":782}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":583504,"byte_end":584801,"line_start":15674,"line_end":15674,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15674:765\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mself . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffe\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":584298,"byte_end":584316,"line_start":15674,"line_end":15674,"column_start":803,"column_end":821,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":803,"highlight_end":821}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":583504,"byte_end":584801,"line_start":15674,"line_end":15674,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15674:803\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":584319,"byte_end":584337,"line_start":15674,"line_end":15674,"column_start":824,"column_end":842,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":824,"highlight_end":842}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":583504,"byte_end":584801,"line_start":15674,"line_end":15674,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15674:824\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0melf . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":584398,"byte_end":584408,"line_start":15674,"line_end":15674,"column_start":903,"column_end":913,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":903,"highlight_end":913}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":583504,"byte_end":584801,"line_start":15674,"line_end":15674,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15674:903\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mr , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . rese\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":584411,"byte_end":584423,"line_start":15674,"line_end":15674,"column_start":916,"column_end":928,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":916,"highlight_end":928}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":583504,"byte_end":584801,"line_start":15674,"line_end":15674,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15674:916\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mcolor , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self .\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":584426,"byte_end":584442,"line_start":15674,"line_end":15674,"column_start":931,"column_end":947,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":931,"highlight_end":947}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":583504,"byte_end":584801,"line_start":15674,"line_end":15674,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15674:931\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":584445,"byte_end":584456,"line_start":15674,"line_end":15674,"column_start":950,"column_end":961,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":950,"highlight_end":961}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":583504,"byte_end":584801,"line_start":15674,"line_end":15674,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15674:950\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0milite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":584459,"byte_end":584475,"line_start":15674,"line_end":15674,"column_start":964,"column_end":980,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":964,"highlight_end":980}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":583504,"byte_end":584801,"line_start":15674,"line_end":15674,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15674:964\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mlf . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , se\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":584478,"byte_end":584491,"line_start":15674,"line_end":15674,"column_start":983,"column_end":996,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":983,"highlight_end":996}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":583504,"byte_end":584801,"line_start":15674,"line_end":15674,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15674:983\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mhfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight ,\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":584494,"byte_end":584510,"line_start":15674,"line_end":15674,"column_start":999,"column_end":1015,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":999,"highlight_end":1015}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":583504,"byte_end":584801,"line_start":15674,"line_end":15674,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15674:999\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_char\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":584681,"byte_end":584691,"line_start":15674,"line_end":15674,"column_start":1186,"column_end":1196,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":1186,"highlight_end":1196}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":583504,"byte_end":584801,"line_start":15674,"line_end":15674,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15674:1186\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mength , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":584740,"byte_end":584756,"line_start":15674,"line_end":15674,"column_start":1245,"column_end":1261,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":1245,"highlight_end":1261}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":583504,"byte_end":584801,"line_start":15674,"line_end":15674,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:15674:1245\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mself . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597581,"byte_end":597603,"line_start":16078,"line_end":16078,"column_start":378,"column_end":400,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":378,"highlight_end":400}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597212,"byte_end":597845,"line_start":16078,"line_end":16078,"column_start":9,"column_end":642,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":642}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16078:378\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597606,"byte_end":597620,"line_start":16078,"line_end":16078,"column_start":403,"column_end":417,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":403,"highlight_end":417}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597212,"byte_end":597845,"line_start":16078,"line_end":16078,"column_start":9,"column_end":642,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":642}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16078:403\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597623,"byte_end":597638,"line_start":16078,"line_end":16078,"column_start":420,"column_end":435,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":420,"highlight_end":435}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597212,"byte_end":597845,"line_start":16078,"line_end":16078,"column_start":9,"column_end":642,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":642}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16078:420\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m. source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . sca\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597663,"byte_end":597685,"line_start":16078,"line_end":16078,"column_start":460,"column_end":482,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":460,"highlight_end":482}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597212,"byte_end":597845,"line_start":16078,"line_end":16078,"column_start":9,"column_end":642,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":642}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16078:460\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0melf . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597688,"byte_end":597702,"line_start":16078,"line_end":16078,"column_start":485,"column_end":499,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":485,"highlight_end":499}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597212,"byte_end":597845,"line_start":16078,"line_end":16078,"column_start":9,"column_end":642,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":642}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16078:485\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m. lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597705,"byte_end":597720,"line_start":16078,"line_end":16078,"column_start":502,"column_end":517,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":502,"highlight_end":517}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597212,"byte_end":597845,"line_start":16078,"line_end":16078,"column_start":9,"column_end":642,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":642}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16078:502\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m. source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597744,"byte_end":597762,"line_start":16078,"line_end":16078,"column_start":541,"column_end":559,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":541,"highlight_end":559}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597212,"byte_end":597845,"line_start":16078,"line_end":16078,"column_start":9,"column_end":642,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":642}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16078:541\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m, self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previo\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597765,"byte_end":597783,"line_start":16078,"line_end":16078,"column_start":562,"column_end":580,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":562,"highlight_end":580}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597212,"byte_end":597845,"line_start":16078,"line_end":16078,"column_start":9,"column_end":642,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":642}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16078:562\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mlf . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previou\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597786,"byte_end":597804,"line_start":16078,"line_end":16078,"column_start":583,"column_end":601,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":583,"highlight_end":601}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597212,"byte_end":597845,"line_start":16078,"line_end":16078,"column_start":9,"column_end":642,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":642}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16078:583\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m. slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597807,"byte_end":597824,"line_start":16078,"line_end":16078,"column_start":604,"column_end":621,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":604,"highlight_end":621}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597212,"byte_end":597845,"line_start":16078,"line_end":16078,"column_start":9,"column_end":642,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":642}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16078:604\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m. save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597827,"byte_end":597844,"line_start":16078,"line_end":16078,"column_start":624,"column_end":641,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":624,"highlight_end":641}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":597212,"byte_end":597845,"line_start":16078,"line_end":16078,"column_start":9,"column_end":642,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":642}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16078:624\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":610010,"byte_end":610030,"line_start":16471,"line_end":16471,"column_start":339,"column_end":359,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_ICON {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, switch_type: {:?}, switch_count: {:?}, scale: {:?}, offset: {:?}, num_icons: {:?}, cur_icon: {:?}, dst_icon: {:?}, picon_data: {:?}, save_buffer: {:?}, update_cb: {:?}, reserved1: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . switch_type , self . switch_count , self . scale , self . offset , self . num_icons , self . cur_icon , self . dst_icon , self . picon_data , self . save_buffer , self . update_cb , self . reserved1)","highlight_start":339,"highlight_end":359}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":609680,"byte_end":610239,"line_start":16471,"line_end":16471,"column_start":9,"column_end":568,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_ICON {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, switch_type: {:?}, switch_count: {:?}, scale: {:?}, offset: {:?}, num_icons: {:?}, cur_icon: {:?}, dst_icon: {:?}, picon_data: {:?}, save_buffer: {:?}, update_cb: {:?}, reserved1: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . switch_type , self . switch_count , self . scale , self . offset , self . num_icons , self . cur_icon , self . dst_icon , self . picon_data , self . save_buffer , self . update_cb , self . reserved1)","highlight_start":9,"highlight_end":568}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16471:339\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m{:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . switch_type , self . switch_count , self . scal\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":610076,"byte_end":610088,"line_start":16471,"line_end":16471,"column_start":405,"column_end":417,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_ICON {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, switch_type: {:?}, switch_count: {:?}, scale: {:?}, offset: {:?}, num_icons: {:?}, cur_icon: {:?}, dst_icon: {:?}, picon_data: {:?}, save_buffer: {:?}, update_cb: {:?}, reserved1: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . switch_type , self . switch_count , self . scale , self . offset , self . num_icons , self . cur_icon , self . dst_icon , self . picon_data , self . save_buffer , self . update_cb , self . reserved1)","highlight_start":405,"highlight_end":417}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":609680,"byte_end":610239,"line_start":16471,"line_end":16471,"column_start":9,"column_end":568,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_ICON {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, switch_type: {:?}, switch_count: {:?}, scale: {:?}, offset: {:?}, num_icons: {:?}, cur_icon: {:?}, dst_icon: {:?}, picon_data: {:?}, save_buffer: {:?}, update_cb: {:?}, reserved1: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . switch_type , self . switch_count , self . scale , self . offset , self . num_icons , self . cur_icon , self . dst_icon , self . picon_data , self . save_buffer , self . update_cb , self . reserved1)","highlight_start":9,"highlight_end":568}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16471:405\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m. source_var_cb , self . switch_type , self . switch_count , self . scale , self . offset , self . num_icons , self . cur_icon , self \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":610162,"byte_end":610179,"line_start":16471,"line_end":16471,"column_start":491,"column_end":508,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_ICON {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, switch_type: {:?}, switch_count: {:?}, scale: {:?}, offset: {:?}, num_icons: {:?}, cur_icon: {:?}, dst_icon: {:?}, picon_data: {:?}, save_buffer: {:?}, update_cb: {:?}, reserved1: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . switch_type , self . switch_count , self . scale , self . offset , self . num_icons , self . cur_icon , self . dst_icon , self . picon_data , self . save_buffer , self . update_cb , self . reserved1)","highlight_start":491,"highlight_end":508}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":609680,"byte_end":610239,"line_start":16471,"line_end":16471,"column_start":9,"column_end":568,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_ICON {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, switch_type: {:?}, switch_count: {:?}, scale: {:?}, offset: {:?}, num_icons: {:?}, cur_icon: {:?}, dst_icon: {:?}, picon_data: {:?}, save_buffer: {:?}, update_cb: {:?}, reserved1: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . switch_type , self . switch_count , self . scale , self . offset , self . num_icons , self . cur_icon , self . dst_icon , self . picon_data , self . save_buffer , self . update_cb , self . reserved1)","highlight_start":9,"highlight_end":568}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16471:491\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m , self . num_icons , self . cur_icon , self . dst_icon , self . picon_data , self . save_buffer , self . update_cb , self . reserved1)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":610182,"byte_end":610200,"line_start":16471,"line_end":16471,"column_start":511,"column_end":529,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_ICON {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, switch_type: {:?}, switch_count: {:?}, scale: {:?}, offset: {:?}, num_icons: {:?}, cur_icon: {:?}, dst_icon: {:?}, picon_data: {:?}, save_buffer: {:?}, update_cb: {:?}, reserved1: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . switch_type , self . switch_count , self . scale , self . offset , self . num_icons , self . cur_icon , self . dst_icon , self . picon_data , self . save_buffer , self . update_cb , self . reserved1)","highlight_start":511,"highlight_end":529}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":609680,"byte_end":610239,"line_start":16471,"line_end":16471,"column_start":9,"column_end":568,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_ICON {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, switch_type: {:?}, switch_count: {:?}, scale: {:?}, offset: {:?}, num_icons: {:?}, cur_icon: {:?}, dst_icon: {:?}, picon_data: {:?}, save_buffer: {:?}, update_cb: {:?}, reserved1: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . switch_type , self . switch_count , self . scale , self . offset , self . num_icons , self . cur_icon , self . dst_icon , self . picon_data , self . save_buffer , self . update_cb , self . reserved1)","highlight_start":9,"highlight_end":568}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16471:511\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m, self . cur_icon , self . dst_icon , self . picon_data , self . save_buffer , self . update_cb , self . reserved1)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":610203,"byte_end":610219,"line_start":16471,"line_end":16471,"column_start":532,"column_end":548,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_ICON {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, switch_type: {:?}, switch_count: {:?}, scale: {:?}, offset: {:?}, num_icons: {:?}, cur_icon: {:?}, dst_icon: {:?}, picon_data: {:?}, save_buffer: {:?}, update_cb: {:?}, reserved1: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . switch_type , self . switch_count , self . scale , self . offset , self . num_icons , self . cur_icon , self . dst_icon , self . picon_data , self . save_buffer , self . update_cb , self . reserved1)","highlight_start":532,"highlight_end":548}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":609680,"byte_end":610239,"line_start":16471,"line_end":16471,"column_start":9,"column_end":568,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_ICON {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, switch_type: {:?}, switch_count: {:?}, scale: {:?}, offset: {:?}, num_icons: {:?}, cur_icon: {:?}, dst_icon: {:?}, picon_data: {:?}, save_buffer: {:?}, update_cb: {:?}, reserved1: {:?} }}\" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . switch_type , self . switch_count , self . scale , self . offset , self . num_icons , self . cur_icon , self . dst_icon , self . picon_data , self . save_buffer , self . update_cb , self . reserved1)","highlight_start":9,"highlight_end":568}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16471:532\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mself . dst_icon , self . picon_data , self . save_buffer , self . update_cb , self . reserved1)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626894,"byte_end":626916,"line_start":16996,"line_end":16996,"column_start":522,"column_end":544,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":522,"highlight_end":544}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:522\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . s\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626919,"byte_end":626931,"line_start":16996,"line_end":16996,"column_start":547,"column_end":559,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":547,"highlight_end":559}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:547\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mdgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self .\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626934,"byte_end":626946,"line_start":16996,"line_end":16996,"column_start":562,"column_end":574,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":562,"highlight_end":574}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:562\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0melf . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_c\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626949,"byte_end":626961,"line_start":16996,"line_end":16996,"column_start":577,"column_end":589,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":577,"highlight_end":589}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:577\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mr_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626986,"byte_end":627008,"line_start":16996,"line_end":16996,"column_start":614,"column_end":636,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":614,"highlight_end":636}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:614\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mx , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . s\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":627011,"byte_end":627023,"line_start":16996,"line_end":16996,"column_start":639,"column_end":651,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":639,"highlight_end":651}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:639\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0melf . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scal\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":627026,"byte_end":627038,"line_start":16996,"line_end":16996,"column_start":654,"column_end":666,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":654,"highlight_end":666}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:654\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0melf . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . of\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":627041,"byte_end":627053,"line_start":16996,"line_end":16996,"column_start":669,"column_end":681,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":669,"highlight_end":681}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:669\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mr_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self .\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":627056,"byte_end":627070,"line_start":16996,"line_end":16996,"column_start":684,"column_end":698,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":684,"highlight_end":698}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:684\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mrce_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":627073,"byte_end":627087,"line_start":16996,"line_end":16996,"column_start":701,"column_end":715,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":701,"highlight_end":715}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:701\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mlf . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":627090,"byte_end":627105,"line_start":16996,"line_end":16996,"column_start":718,"column_end":733,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":718,"highlight_end":733}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:718\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m. max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_dat\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":627108,"byte_end":627123,"line_start":16996,"line_end":16996,"column_start":736,"column_end":751,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":736,"highlight_end":751}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:736\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_m\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":627194,"byte_end":627210,"line_start":16996,"line_end":16996,"column_start":822,"column_end":838,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":822,"highlight_end":838}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:822\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mve_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":627213,"byte_end":627231,"line_start":16996,"line_end":16996,"column_start":841,"column_end":859,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":841,"highlight_end":859}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:841\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previo\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":627234,"byte_end":627252,"line_start":16996,"line_end":16996,"column_start":862,"column_end":880,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":862,"highlight_end":880}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:862\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mlocal_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previou\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":627255,"byte_end":627273,"line_start":16996,"line_end":16996,"column_start":883,"column_end":901,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":883,"highlight_end":901}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:883\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mf . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":627276,"byte_end":627293,"line_start":16996,"line_end":16996,"column_start":904,"column_end":921,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":904,"highlight_end":921}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:904\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m. save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":627296,"byte_end":627313,"line_start":16996,"line_end":16996,"column_start":924,"column_end":941,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":924,"highlight_end":941}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":626381,"byte_end":627314,"line_start":16996,"line_end":16996,"column_start":9,"column_end":942,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)","highlight_start":9,"highlight_end":942}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:16996:924\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":646598,"byte_end":646620,"line_start":17609,"line_end":17609,"column_start":691,"column_end":713,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":691,"highlight_end":713}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":645916,"byte_end":647213,"line_start":17609,"line_end":17609,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:17609:691\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":646623,"byte_end":646637,"line_start":17609,"line_end":17609,"column_start":716,"column_end":730,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":716,"highlight_end":730}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":645916,"byte_end":647213,"line_start":17609,"line_end":17609,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:17609:716\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . sca\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":646662,"byte_end":646684,"line_start":17609,"line_end":17609,"column_start":755,"column_end":777,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":755,"highlight_end":777}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":645916,"byte_end":647213,"line_start":17609,"line_end":17609,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:17609:755\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mource_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":646687,"byte_end":646701,"line_start":17609,"line_end":17609,"column_start":780,"column_end":794,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":780,"highlight_end":794}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":645916,"byte_end":647213,"line_start":17609,"line_end":17609,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:17609:780\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . sca\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":646726,"byte_end":646748,"line_start":17609,"line_end":17609,"column_start":819,"column_end":841,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":819,"highlight_end":841}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":645916,"byte_end":647213,"line_start":17609,"line_end":17609,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:17609:819\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mource_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . text\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":646751,"byte_end":646765,"line_start":17609,"line_end":17609,"column_start":844,"column_end":858,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":844,"highlight_end":858}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":645916,"byte_end":647213,"line_start":17609,"line_end":17609,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:17609:844\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":646981,"byte_end":647000,"line_start":17609,"line_end":17609,"column_start":1074,"column_end":1093,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":1074,"highlight_end":1093}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":645916,"byte_end":647213,"line_start":17609,"line_end":17609,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:17609:1074\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mf . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self .\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":647052,"byte_end":647068,"line_start":17609,"line_end":17609,"column_start":1145,"column_end":1161,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":1145,"highlight_end":1161}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":645916,"byte_end":647213,"line_start":17609,"line_end":17609,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:17609:1145\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mre_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":647071,"byte_end":647089,"line_start":17609,"line_end":17609,"column_start":1164,"column_end":1182,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":1164,"highlight_end":1182}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":645916,"byte_end":647213,"line_start":17609,"line_end":17609,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:17609:1164\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":647092,"byte_end":647110,"line_start":17609,"line_end":17609,"column_start":1185,"column_end":1203,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":1185,"highlight_end":1203}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":645916,"byte_end":647213,"line_start":17609,"line_end":17609,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:17609:1185\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mlocal_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previo\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":647113,"byte_end":647131,"line_start":17609,"line_end":17609,"column_start":1206,"column_end":1224,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":1206,"highlight_end":1224}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":645916,"byte_end":647213,"line_start":17609,"line_end":17609,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:17609:1206\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mf . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previou\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":647134,"byte_end":647152,"line_start":17609,"line_end":17609,"column_start":1227,"column_end":1245,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":1227,"highlight_end":1245}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":645916,"byte_end":647213,"line_start":17609,"line_end":17609,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:17609:1227\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m. save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":647155,"byte_end":647172,"line_start":17609,"line_end":17609,"column_start":1248,"column_end":1265,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":1248,"highlight_end":1265}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":645916,"byte_end":647213,"line_start":17609,"line_end":17609,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:17609:1248\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m. update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":647175,"byte_end":647192,"line_start":17609,"line_end":17609,"column_start":1268,"column_end":1285,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":1268,"highlight_end":1285}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":645916,"byte_end":647213,"line_start":17609,"line_end":17609,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:17609:1268\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":647195,"byte_end":647212,"line_start":17609,"line_end":17609,"column_start":1288,"column_end":1305,"is_primary":true,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":1288,"highlight_end":1305}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":645916,"byte_end":647213,"line_start":17609,"line_end":17609,"column_start":9,"column_end":1306,"is_primary":false,"text":[{"text":"        write ! (f , \"ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}\" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)","highlight_start":9,"highlight_end":1306}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:17609:1288\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mf . update_0_cb , self . previous_x , self . previous_y , self . previous_0)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":661879,"byte_end":661891,"line_start":18090,"line_end":18090,"column_start":287,"column_end":299,"is_primary":true,"text":[{"text":"        write ! (f , \"MOUSE_ARG {{ source_var: {:?}, scale: {:?}, numeric_table: {:?}, numeric_table_size: {:?}, id_table: {:?}, id_table_size: {:?}, string_table: {:?}, string_table_size: {:?}, numeric_callback: {:?}, id_callback: {:?}, string_callback: {:?} }}\" , self . source_var , self . scale , self . numeric_table , self . numeric_table_size , self . id_table , self . id_table_size , self . string_table , self . string_table_size , self . numeric_callback , self . id_callback , self . string_callback)","highlight_start":287,"highlight_end":299}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":661601,"byte_end":662105,"line_start":18090,"line_end":18090,"column_start":9,"column_end":513,"is_primary":false,"text":[{"text":"        write ! (f , \"MOUSE_ARG {{ source_var: {:?}, scale: {:?}, numeric_table: {:?}, numeric_table_size: {:?}, id_table: {:?}, id_table_size: {:?}, string_table: {:?}, string_table_size: {:?}, numeric_callback: {:?}, id_callback: {:?}, string_callback: {:?} }}\" , self . source_var , self . scale , self . numeric_table , self . numeric_table_size , self . id_table , self . id_table_size , self . string_table , self . string_table_size , self . numeric_callback , self . id_callback , self . string_callback)","highlight_start":9,"highlight_end":513}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:18090:287\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m18090\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mlback: {:?}, string_callback: {:?} }}\" , self . source_var , self . scale , self . numeric_table , self . numeric_table_size , self . \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":661894,"byte_end":661914,"line_start":18090,"line_end":18090,"column_start":302,"column_end":322,"is_primary":true,"text":[{"text":"        write ! (f , \"MOUSE_ARG {{ source_var: {:?}, scale: {:?}, numeric_table: {:?}, numeric_table_size: {:?}, id_table: {:?}, id_table_size: {:?}, string_table: {:?}, string_table_size: {:?}, numeric_callback: {:?}, id_callback: {:?}, string_callback: {:?} }}\" , self . source_var , self . scale , self . numeric_table , self . numeric_table_size , self . id_table , self . id_table_size , self . string_table , self . string_table_size , self . numeric_callback , self . id_callback , self . string_callback)","highlight_start":302,"highlight_end":322}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":661601,"byte_end":662105,"line_start":18090,"line_end":18090,"column_start":9,"column_end":513,"is_primary":false,"text":[{"text":"        write ! (f , \"MOUSE_ARG {{ source_var: {:?}, scale: {:?}, numeric_table: {:?}, numeric_table_size: {:?}, id_table: {:?}, id_table_size: {:?}, string_table: {:?}, string_table_size: {:?}, numeric_callback: {:?}, id_callback: {:?}, string_callback: {:?} }}\" , self . source_var , self . scale , self . numeric_table , self . numeric_table_size , self . id_table , self . id_table_size , self . string_table , self . string_table_size , self . numeric_callback , self . id_callback , self . string_callback)","highlight_start":9,"highlight_end":513}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:18090:302\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m18090\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0m_callback: {:?} }}\" , self . source_var , self . scale , self . numeric_table , self . numeric_table_size , self . id_table , self . i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":661945,"byte_end":661960,"line_start":18090,"line_end":18090,"column_start":353,"column_end":368,"is_primary":true,"text":[{"text":"        write ! (f , \"MOUSE_ARG {{ source_var: {:?}, scale: {:?}, numeric_table: {:?}, numeric_table_size: {:?}, id_table: {:?}, id_table_size: {:?}, string_table: {:?}, string_table_size: {:?}, numeric_callback: {:?}, id_callback: {:?}, string_callback: {:?} }}\" , self . source_var , self . scale , self . numeric_table , self . numeric_table_size , self . id_table , self . id_table_size , self . string_table , self . string_table_size , self . numeric_callback , self . id_callback , self . string_callback)","highlight_start":353,"highlight_end":368}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":661601,"byte_end":662105,"line_start":18090,"line_end":18090,"column_start":9,"column_end":513,"is_primary":false,"text":[{"text":"        write ! (f , \"MOUSE_ARG {{ source_var: {:?}, scale: {:?}, numeric_table: {:?}, numeric_table_size: {:?}, id_table: {:?}, id_table_size: {:?}, string_table: {:?}, string_table_size: {:?}, numeric_callback: {:?}, id_callback: {:?}, string_callback: {:?} }}\" , self . source_var , self . scale , self . numeric_table , self . numeric_table_size , self . id_table , self . id_table_size , self . string_table , self . string_table_size , self . numeric_callback , self . id_callback , self . string_callback)","highlight_start":9,"highlight_end":513}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:18090:353\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m18090\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mscale , self . numeric_table , self . numeric_table_size , self . id_table , self . id_table_size , self . string_table , self . strin\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":661986,"byte_end":662005,"line_start":18090,"line_end":18090,"column_start":394,"column_end":413,"is_primary":true,"text":[{"text":"        write ! (f , \"MOUSE_ARG {{ source_var: {:?}, scale: {:?}, numeric_table: {:?}, numeric_table_size: {:?}, id_table: {:?}, id_table_size: {:?}, string_table: {:?}, string_table_size: {:?}, numeric_callback: {:?}, id_callback: {:?}, string_callback: {:?} }}\" , self . source_var , self . scale , self . numeric_table , self . numeric_table_size , self . id_table , self . id_table_size , self . string_table , self . string_table_size , self . numeric_callback , self . id_callback , self . string_callback)","highlight_start":394,"highlight_end":413}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":661601,"byte_end":662105,"line_start":18090,"line_end":18090,"column_start":9,"column_end":513,"is_primary":false,"text":[{"text":"        write ! (f , \"MOUSE_ARG {{ source_var: {:?}, scale: {:?}, numeric_table: {:?}, numeric_table_size: {:?}, id_table: {:?}, id_table_size: {:?}, string_table: {:?}, string_table_size: {:?}, numeric_callback: {:?}, id_callback: {:?}, string_callback: {:?} }}\" , self . source_var , self . scale , self . numeric_table , self . numeric_table_size , self . id_table , self . id_table_size , self . string_table , self . string_table_size , self . numeric_callback , self . id_callback , self . string_callback)","highlight_start":9,"highlight_end":513}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:18090:394\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m18090\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mic_table_size , self . id_table , self . id_table_size , self . string_table , self . string_table_size , self . numeric_callback , se\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":662035,"byte_end":662058,"line_start":18090,"line_end":18090,"column_start":443,"column_end":466,"is_primary":true,"text":[{"text":"        write ! (f , \"MOUSE_ARG {{ source_var: {:?}, scale: {:?}, numeric_table: {:?}, numeric_table_size: {:?}, id_table: {:?}, id_table_size: {:?}, string_table: {:?}, string_table_size: {:?}, numeric_callback: {:?}, id_callback: {:?}, string_callback: {:?} }}\" , self . source_var , self . scale , self . numeric_table , self . numeric_table_size , self . id_table , self . id_table_size , self . string_table , self . string_table_size , self . numeric_callback , self . id_callback , self . string_callback)","highlight_start":443,"highlight_end":466}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":661601,"byte_end":662105,"line_start":18090,"line_end":18090,"column_start":9,"column_end":513,"is_primary":false,"text":[{"text":"        write ! (f , \"MOUSE_ARG {{ source_var: {:?}, scale: {:?}, numeric_table: {:?}, numeric_table_size: {:?}, id_table: {:?}, id_table_size: {:?}, string_table: {:?}, string_table_size: {:?}, numeric_callback: {:?}, id_callback: {:?}, string_callback: {:?} }}\" , self . source_var , self . scale , self . numeric_table , self . numeric_table_size , self . id_table , self . id_table_size , self . string_table , self . string_table_size , self . numeric_callback , self . id_callback , self . string_callback)","highlight_start":9,"highlight_end":513}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:18090:443\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m18090\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mize , self . string_table , self . string_table_size , self . numeric_callback , self . id_callback , self . string_callback)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":662061,"byte_end":662079,"line_start":18090,"line_end":18090,"column_start":469,"column_end":487,"is_primary":true,"text":[{"text":"        write ! (f , \"MOUSE_ARG {{ source_var: {:?}, scale: {:?}, numeric_table: {:?}, numeric_table_size: {:?}, id_table: {:?}, id_table_size: {:?}, string_table: {:?}, string_table_size: {:?}, numeric_callback: {:?}, id_callback: {:?}, string_callback: {:?} }}\" , self . source_var , self . scale , self . numeric_table , self . numeric_table_size , self . id_table , self . id_table_size , self . string_table , self . string_table_size , self . numeric_callback , self . id_callback , self . string_callback)","highlight_start":469,"highlight_end":487}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":661601,"byte_end":662105,"line_start":18090,"line_end":18090,"column_start":9,"column_end":513,"is_primary":false,"text":[{"text":"        write ! (f , \"MOUSE_ARG {{ source_var: {:?}, scale: {:?}, numeric_table: {:?}, numeric_table_size: {:?}, id_table: {:?}, id_table_size: {:?}, string_table: {:?}, string_table_size: {:?}, numeric_callback: {:?}, id_callback: {:?}, string_callback: {:?} }}\" , self . source_var , self . scale , self . numeric_table , self . numeric_table_size , self . id_table , self . id_table_size , self . string_table , self . string_table_size , self . numeric_callback , self . id_callback , self . string_callback)","highlight_start":9,"highlight_end":513}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:18090:469\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m18090\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mle , self . string_table_size , self . numeric_callback , self . id_callback , self . string_callback)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"reference to packed field is unaligned","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":662082,"byte_end":662104,"line_start":18090,"line_end":18090,"column_start":490,"column_end":512,"is_primary":true,"text":[{"text":"        write ! (f , \"MOUSE_ARG {{ source_var: {:?}, scale: {:?}, numeric_table: {:?}, numeric_table_size: {:?}, id_table: {:?}, id_table_size: {:?}, string_table: {:?}, string_table_size: {:?}, numeric_callback: {:?}, id_callback: {:?}, string_callback: {:?} }}\" , self . source_var , self . scale , self . numeric_table , self . numeric_table_size , self . id_table , self . id_table_size , self . string_table , self . string_table_size , self . numeric_callback , self . id_callback , self . string_callback)","highlight_start":490,"highlight_end":512}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17553,"byte_end":17583,"line_start":500,"line_end":500,"column_start":24,"column_end":54,"is_primary":false,"text":[{"text":"        $dst.write_fmt($crate::format_args!($($arg)*))","highlight_start":24,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":661601,"byte_end":662105,"line_start":18090,"line_end":18090,"column_start":9,"column_end":513,"is_primary":false,"text":[{"text":"        write ! (f , \"MOUSE_ARG {{ source_var: {:?}, scale: {:?}, numeric_table: {:?}, numeric_table_size: {:?}, id_table: {:?}, id_table_size: {:?}, string_table: {:?}, string_table_size: {:?}, numeric_callback: {:?}, id_callback: {:?}, string_callback: {:?} }}\" , self . source_var , self . scale , self . numeric_table , self . numeric_table_size , self . id_table , self . id_table_size , self . string_table , self . string_table_size , self . numeric_callback , self . id_callback , self . string_callback)","highlight_start":9,"highlight_end":513}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":17475,"byte_end":17493,"line_start":498,"line_end":498,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! write {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30112,"byte_end":30136,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: reference to packed field is unaligned\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:18090:490\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m18090\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0me_size , self . numeric_callback , self . id_callback , self . string_callback)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"`#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)","code":{"code":"unaligned_references","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":666895,"byte_end":666900,"line_start":18270,"line_end":18270,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"#[derive(Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs","byte_start":666895,"byte_end":666900,"line_start":18270,"line_end":18270,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"#[derive(Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Debug)]","def_site_span":{"file_name":"C:\\Users\\dev\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","byte_start":23718,"byte_end":23745,"line_start":696,"line_end":696,"column_start":5,"column_end":32,"is_primary":false,"text":[{"text":"    pub macro Debug($item:item) {","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs","byte_start":170,"byte_end":190,"line_start":7,"line_end":7,"column_start":10,"column_end":30,"is_primary":true,"text":[{"text":"#![allow(unaligned_references)]","highlight_start":10,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\Desktop\\B78Xheavy\\B78XH\\src\\systems\\systems_wasm\\target\\debug\\build\\msfs-175400dd04ace4c3\\out/msfs-sys.rs:18270:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m18270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#[derive(Debug)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dev\\.cargo\\git\\checkouts\\msfs-rs-34f53eafbc83effb\\f5ebb3d\\msfs\\src\\sys.rs:7:10\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m#![allow(unaligned_references)]\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}}]}
